# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ~~~~~~~~ --order of sourcing-- ~~~~~~~~ #
# (ignoring /etc/* files)
# $ZDOTDIR/.zshenv
# $ZDOTDIR/.zprofile <-- XOR .zlogin  (by intention, but not enforced)
# $ZDOTDIR/.zshrc
# $ZDOTDIR/.zlogin  <-- XOR .zprofile  (by intention, but not enforced)
# $ZDOTDIR/.zlogout
#
# NOTES: env: sourced each shell
#        rc: sourced each *interactive* shell
#        profile|x|login : sourced each *login* shell
#                           login-shells often not opened in linux, but
#                           opened with each new window or tab in macOS

# ~~~~~~~~ --useful documentation-- ~~~~~~~~ #
# Man-page with a ton of ZSH info:
#   'man zshcontrib'
# Man-page with many (not all) ZSH options:
#   'man zshoptions'

# while this did not directly contribute to much here due to timing
# the following website deserves special mention:
#   https://thevaluable.dev/zsh-install-configure-mouseless/


# ############################ --ZSH Stuff-- ######################## #
# sets the zsh_history file in its typical location, preventing it from
# being placed in our git versioned  ZSH/ directory (due to $ZDOTDIR setting in .zshenv)
# this is principally as a backup defense (on top of gitignore) against accidentally
# synching terminal history (and possibly sensitive data)
# NOTE: also in .zshenv
export HISTFILE=$HOME/.zsh_history
export SAVEHIST=999999000  # deduplicated history size
export HISTSIZE=999999999  # non-deduplicated history size
# HISTSIZE - SAVEHIST = number of non-deduplicated lines kept in history
# in our case: diff = 999

export CC="/usr/bin/gcc -I$(brew --prefix unixodbc)/include"
export LDFLAGS="-L$(brew --prefix unixodbc)/lib"

# ######################### --ZSH Options --############################ #
# SHOW: 'setopt' <-- shows currently set options
# SEE: 'man zshoptions'

# set cd'ing with just directory names typed in
setopt auto_cd

# try to correct command and all arguments on line
setopt correct_all
export CORRECT_IGNORE_FILE='.vim|.nvim|.git'

# all cd actions add last location to a stack (can used 'popd' to de-stack and travel to location)
setopt auto_pushd

# enable vi mode, increase visual responsiveness, load cursor change code

source ~/.config/zsh/sources/enhanced-vimode-setup.zsh

# default editor
# "VISUAL" and "EDITOR" usually substitutable, best to set both to same
export EDITOR='nvim'
export VISUAL='nvim'
# alternatives: vim, nvim, helix

#Source functions file
source ~/.config/zsh/sources/functions.zsh


# ########################### --Aliases-- ############################## #
# ¡NOTE!:  'alias -g ...' allows alias to work even if not first word in command
#           e.g. say    'al='alias'
#                then   > al  ~~> > alias
#                       > fd whatever | al ~~> fd whatever | alias
#                BUT    > sudo al  ~~> sudo al     <-- no expansion
#                       > echo al ~~> echo al      <-- no expansion
#               this can be corrected by globaling the alias, with the caveat
#               that that letter word will *always* expand
#
#  SEE: `which <alias>` to find what something is aliased to

# ----------- shadow aliases (WoooOOOooo) -----------
# I'm including these aliases for simplicity of adoption and to assist
# with learning classic terminal commands
# I also have non-shadowed versions below
# feel free (as with everything) to remove or adjust the following

# ----- ls series, but with color -----
# clasic ls, list view ll, and then an alias for tree also offered as 'lt'
# NOTE: I have included '--all' ('-a') for all of the ls series
#       that is not default behavior, but shows "hidden" files by default
#       and will help when exploring the systems we're using.
alias -g ls='exa --all'
alias -g ll='exa --all --long'
alias -g lt='exa --all --tree --level=3'
alias -g tree='exa --all --tree --level=6'

# ----- cat, but with color -----
alias -g cat='bat --paging=never'

# ----- man(pages), but with color -----
alias -g man='batman'

# ----- dig(DNS), but with color -----
alias -g dig='dog'

# NOTE: three replacement commands are *NOT* shadowed here
#       they take different syntax
#       'rg' (ripgrep) mostly replaces 'grep', but has different syntax
#       'c'/'z' (zoxide) mostly replace 'cd', but fuzzy corrects to closest visisted dir
#       'fd' mostly replaces 'find', but has different syntax
#       (and not included as defaults in our repo, but 'sd' vs 'sed': same deal)
# ---------------------------

# ----------- git -----------
# git ~~()~~> "g"
# NOTE: similar, but different aliasing can be set in '.gitconfig'
#       those aliases are for the arguments that *follow* the 'git ' command

alias g='git'

alias ga='git add'
alias gau='git add --update'  # git add all tracked && updated files
alias grs='git restore --staged'  # un-stage files *specified*
alias gkh='git checkout HEAD'  # return files to last commit state (¡does not preserve changes as unstaged!)

alias gb='git branch'  # git list all branches if no further elaboration
alias gba='git branch --all'  # also list remote branches
alias gk='git checkout'

alias gc='git commit'
alias gcm='git commit --message'  # git commit along with commit message on line

alias gd='git diff'
alias gds='git diff --staged'

alias gf='git fetch'

alias glg='git log --all --decorate --oneline --graph'  # commit graph

alias gm='git merge'

alias gpush='git push'  # minimally abbreviated due to similarity to 'git pull'
alias gpull='git pull'

alias grem='git remote'
alias gremv='git remote --verbose'

alias gs='git status'

alias gt='git ls-tree' # give content info about a git work-tree

# ----------- neovim -----------
# nvim ~~()~~> "nn" Note: "nm" is a prexisting keyword AND 'nn' is apropos
alias nn='nvim'
alias nn.='nvim .'
# alias nvim='lvim'
# alias nn='nvim'
alias vimdiff='nvim -d'
# # neovide --multigrid ~~()~~> "nv"
# alias nv='neovide --multigrid'  # neovide is a GUI application for neovim

# ----------- varied -----------
# batman ~~()~~> "mab"
alias mab='batman'

# exa ~~()~~> "e"_fam  (~= "ls"_fam)
alias es='exa --all --classify  --icons --sort="type"'
alias el='exa --long --numeric --all --classify --header --icons --sort="type" --time-style="long-iso"'
alias et='exa --tree --all --ignore-glob=".git" --icons --sort="type" --level=3'  # tree: max_depth 3
alias etall='exa --tree --all --ignore-glob=".git" --icons --sort="type"'         # tree: unlimited depth

# ---------- chezmoi -----------
alias cz='chezmoi'

# fzf... ~~()~~> "fzf"
# NOTE: fzf is involved enough to have its own file.
#       See the "--fzf--" section (below) for source reference.
#       Defined in that source file:
# alias -g fzf --<with bat preview>
#
# fd_hidden ~~()~~> "fdh"
alias fdh='fd --exclude="'"{.git,.venv}"'" --hidden'  # iclude hidden minus common noise
# NOTE:          ^ this takes a *glob* pattern, not a regex pattern
#
# [ripgrep] rg... ~~()~~> "rg"
# '-s' to add case sensitivity back
alias -g rg='rg --hidden --ignore-case'
# ^global to prevent silent fall back and subtle confusions that would ensue

# sets up zoxide, which operates as "z"
# z ~~()~~> "c"  (easier to type and a partial version of "cd", lol)
eval "$(zoxide init zsh)"
alias c='z'
alias ci='zi'

# ~~~~~~~~ --ZSH Completions ~~~~~~~~ #
# --not using completions, but leaving this here should there be sufficient future interest--
# --On Why:
#       arcane, maintenance heavy (new command/new options req changes),
#       can slow down shell, and, per purposes of this repo,
#       getting comfortable with  'man xxx' | 'xxx --help' is helpful :) --
# useful info on completion system:
#   https://thevaluable.dev/zsh-completion-guide-examples/

# brew folder important to adding completions:
. /opt/homebrew/share/zsh/site-functions
# # as-needed-loading, without alias expansion and in in zsh-style, of comp(letion)init
FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fpath=(${ASDF_DIR}/completions $fpath)
autoload -Uz compinit
compinit

# 1Pass Shell-completion
eval "$(op completion zsh)"; compdef _op op

# ############################# --fzf-- ################################ #
# fzf is amazing, but uncharacteristically ...wide for a terminal app
# below are multiple defaults that apply to various ways of calling
# the underlying functionality.
#
# So, for organizational purposes, we've moved it to it's own file.
# Which we simply source here. :)

source ~/.config/zsh/sources/fzf-call-settings.zsh


# ############################ --Prompt-- ############################# #
# My first prompt :)
# [leaving it here in case you ever want to go hyper-minimal or
#  want a cue on tossing a bit of color into another setup without installs]
#PROMPT="%F{cyan}%n %1~ %# %f"

# Starship.rs initializer (to be at "end" of file, along with the following line)
#eval "$(starship init zsh)"

#P10k
source ~/powerlevel10k/powerlevel10k.zsh-theme


# ########################### --ZSH Input Mods-- ####################### #
# NOTE: location may change for a given installation
#       if in doubt: 'brew reinstall ...' and check the output location
#       (it should give you an explicit "source ..." line to add)
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# ########################### --Credentials-- ########################## #
# a file stored separately to store credentials and API keys such as those for github access.
source $HOME/.cred/shcred

# To customize prompt, run `p10k configure` or edit ~/.config/zsh/.p10k.zsh.
[[ ! -f ~/.config/zsh/.p10k.zsh ]] || source ~/.config/zsh/.p10k.zsh
export PATH=$PATH:~/.gem/ruby/2.6.0/bin
#nvim
export PATH=$PATH:~/nvim-macos/bin
# pyenv stuff
export PYENV_ROOT="$HOME/.pyenv"
command -v pyenv >/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

# OKTA
export AWS_OKTA_MFA_DUO_DEVICE=token

# ----------- PagerDuty -----------
#export PD_API_KEY=op://ENVVARS/ENV_VARS/PD_API_KEY
export PD_API_KEY_US2="op://ENVVARS/ENV_VARS/PD_API_KEY_US2"
# ----------- AWS -----------
export AWS_ACCESS_KEY_ID="op://ENVVARS/ENV_VARS/AWS_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="op://ENVVARS/ENV_VARS/AWS_SECRET_ACCESS_KEY"

function pd_api_key() {
  op read op://ENVVARS/ENV_VARS/PD_API_KEY;
}
export PD_API_KEY=$(pd_api_key)

## https://developer.1password.com/docs/cli/secret-references
## use 'op run --' to run a command with secrets
## ie. 'op run -- env' will print out the environment variables
## and 'op run -- echo $PD_API_KEY' will print out the value of the secret

#ASDF
. /opt/homebrew/opt/asdf/libexec/asdf.sh
